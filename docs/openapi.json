{"info": {"description": "Edge API", "title": "EasyVizAR Edge API", "version": "0.1"}, "paths": {"/headsets": {"get": {"description": "List headsets", "tags": ["headsets"], "parameters": [{"name": "envelope", "in": "query", "required": false, "description": "If set, the returned list will be wrapped in an envelope with this name."}], "responses": {"200": {"description": "A list of headsets.", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Headset"}}}}}}}, "post": {"description": "Register a headset", "tags": ["headsets"], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Headset"}}}}, "responses": {"200": {"description": "A headset", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Headset"}}}}}}}, "/headsets/authenticate/": {"post": {"description": "Authenticate a headset", "tags": ["headsets"], "responses": {"200": {"description": "Authentication response"}}}}, "/headsets/{headsetId}/updates": {"get": {"summary": "List headset updates.", "description": "List headset updates.\nThe optional \"after\" and \"wait\" query parameters make it possible for the caller to wait for the next update by passing the last timestamp the caller has received.", "tags": ["headsets"], "parameters": [{"name": "id", "in": "path", "required": true, "description": "Headset ID"}, {"name": "after", "in": "query", "required": false, "description": "Limit results to updates after the given timestamp."}, {"name": "envelope", "in": "query", "required": false, "description": "If set, the returned list will be wrapped in an envelope with this name."}, {"name": "wait", "in": "query", "required": false, "description": "Request that the server wait a time limit (in seconds) for an update if none are immediately available. The server will return one or more results as soon as they are available, or if the time limit has passed, the server will return a No Content 204 result indicating timeout. A time limit of 30-60 seconds is recommended."}], "responses": {"200": {"description": "A list of headset updates.", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/HeadsetUpdate"}}}}}, "204": {"description": "A waiting request timed out without any results."}}}, "post": {"description": "Create a new headset update", "tags": ["headsets"], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HeadsetUpdate"}}}}, "responses": {"200": {"description": "A headset update object", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HeadsetUpdate"}}}}}}}, "/headsets/{headsetId}": {"put": {"description": "Update a headset", "tags": ["headsets"], "parameters": [{"name": "id", "in": "path", "required": true, "description": "Headset ID"}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Headset"}}}}, "responses": {"200": {"description": "New headset object", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Headset"}}}}}}}, "/headsets/{headset_id}": {"delete": {"description": "Delete a headset", "tags": ["headsets"], "parameters": [{"name": "id", "in": "path", "required": true, "description": "Headset ID"}], "responses": {"200": {"description": "Headset deleted"}}}}, "/maps": {"get": {"description": "List maps", "tags": ["maps"], "parameters": [{"name": "envelope", "in": "query", "required": false, "description": "If set, the returned list will be wrapped in an envelope with this name."}], "responses": {"200": {"description": "A list of Map objects.", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Map"}}}}}}}, "post": {"description": "Create a map", "tags": ["maps"], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Map"}}}}, "responses": {"201": {"description": "Map created", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Map"}}}}}}}, "/maps/{map_id}": {"get": {"description": "Get map", "tags": ["maps"], "parameters": [{"name": "id", "in": "path", "required": true, "description": "Map ID"}], "responses": {"200": {"description": "A Map object", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Headset"}}}}}}, "put": {"description": "Replace a map", "tags": ["maps"], "parameters": [{"name": "id", "in": "path", "required": true, "description": "Map ID"}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Map"}}}}, "responses": {"200": {"description": "Map replaced", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Map"}}}}, "201": {"description": "Map created", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Map"}}}}}}, "delete": {"description": "Delete a map", "tags": ["maps"], "parameters": [{"name": "id", "in": "path", "required": true, "description": "Map ID"}], "responses": {"200": {"description": "Map deleted"}}}}, "/maps/features": {"get": {"summary": "List map feature types", "description": "List all types of map features that the server supports. Each map feature type has a name, description, icon for the web view, and eventually display information for the AR headset.", "tags": ["maps"], "parameters": [{"name": "envelope", "in": "query", "required": false, "description": "If set, the returned list will be wrapped in an envelope with this name."}], "responses": {"200": {"description": "A list of map feature type definitions", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/MapFeatureType"}}}}}}}}, "/maps/{map_id}/features": {"get": {"description": "List map features", "tags": ["maps"], "parameters": [{"name": "id", "in": "path", "required": true, "description": "Map ID"}, {"name": "envelope", "in": "query", "required": false, "description": "If set, the returned list will be wrapped in an envelope with this name."}], "responses": {"200": {"description": "A list of MapFeature objects", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/MapFeature"}}}}}}}, "post": {"description": "Add a map feature", "tags": ["maps"], "parameters": [{"name": "id", "in": "path", "required": true, "description": "Map ID"}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/MapFeature"}}}}, "responses": {"201": {"description": "MapFeature object", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/MapFeature"}}}}}}}, "/maps/{map_id}/surfaces": {"get": {"description": "List surfaces", "tags": ["maps"], "parameters": [{"name": "id", "in": "path", "required": true, "description": "Map ID"}], "responses": {"200": {"description": "A list of surfaces.", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/SurfaceFileInformation"}}}}}}}}, "/maps/{map_id}/surfaces/{surface_id}": {"put": {"summary": "Update map surface", "description": "Create or update a surface, which should be a triangle mesh in PLY file format", "tags": ["maps"], "parameters": [{"name": "id", "in": "path", "required": true, "description": "Map ID"}], "requestBody": {"required": true, "content": {"application/ply": {}}}, "responses": {"200": {"description": "A surface file information object", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/SurfaceFileInformation"}}}}}}}, "/maps/{map_id}/qrcode": {"get": {"description": "Get a QR code for the map.", "tags": ["maps"], "parameters": [{"name": "id", "in": "path", "required": true, "description": "Map ID"}], "responses": {"200": {"description": "An SVG image file.", "content": {"image/svg+xml": {}}}}}}, "/maps/{map_id}/floor-plan.svg": {"get": {"description": "Get a floor plan image.", "tags": ["maps"], "parameters": [{"name": "id", "in": "path", "required": true, "description": "Map ID"}], "responses": {"200": {"description": "An SVG image file.", "content": {"image/svg+xml": {}}}}}}, "/work-items": {"get": {"description": "List work items\nThe optional filter parameters combined with a \"wait\" parameter make it possible for the caller to wait for notification of the next item.", "summary": "List work items", "tags": ["work-items"], "parameters": [{"name": "content-type", "in": "query", "required": false, "description": "Filter work items on content-type, e.g. \"image/jpeg\"."}, {"name": "envelope", "in": "query", "required": false, "description": "If set, the returned list will be wrapped in an envelope with this name."}, {"name": "source-type", "in": "query", "required": false, "description": "Filter work items on source-type, e.g. \"camera\"."}, {"name": "status", "in": "query", "required": false, "description": "Filter work items on status (created|ready|done)."}, {"name": "wait", "in": "query", "required": false, "description": "Request that the server wait a time limit (in seconds) for a new result if none are immediately available. The server will return one or more results as soon as they are available, or if the time limit has passed, the server will return a No Content 204 result indicating timeout. A time limit of 30-60 seconds is recommended."}], "responses": {"200": {"description": "A list of WorkItem objects", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/WorkItem"}}}}}}}, "post": {"summary": "Create a WorkItem", "description": "Create a WorkItem\nA work item should include data for the worker to process, which is usually an image. The file may either be specified through a URL, which the worker can download to process, or it can be uploaded after creating the work item. If fileUrl is unspecified, then the server will set fileUrl to an appropriate upload UR, and the caller should upload the file using a PUT operation.", "tags": ["work-items"], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/WorkItem"}}}}, "responses": {"201": {"description": "The created WorkItem object", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/WorkItem"}}}}}}}, "/work-items/{work_item_id}": {"get": {"summary": "Get a WorkItem by ID", "tags": ["work-items"], "responses": {"200": {"description": "A WorkItem object", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/WorkItem"}}}}}}, "put": {"summary": "Create or update a WorkItem by ID", "tags": ["work-items"], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/WorkItem"}}}}, "responses": {"200": {"description": "A WorkItem object", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/WorkItem"}}}}}}, "delete": {"summary": "Delete a WorkItem by ID", "tags": ["work-items"], "responses": {"200": {"description": "A WorkItem object", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/WorkItem"}}}}}}}, "/work-items/data/{filename}": {"get": {"summary": "Get a WorkItem data file", "description": "Use this method to fetch a data file such as an image associated with a work item. This method will only succeed if the the data file is stored on the same host (fileUrl is a relative path in the work item) and the work item status is \"ready\" or \"done\".", "tags": ["work-items"], "responses": {"200": {"description": "The image or other data file.", "content": {"image/jpeg": {}, "image/png": {}}}}}, "post": {"summary": "Replace a WorkItem data file", "description": "Use this method to upload a data file such as an image to accompany a work item. This should be used after creating a work item with an empty fileUrl, in which case, after which the server will have determined the work item ID and path for the data file.", "tags": ["work-items"], "requestBody": {"required": true, "content": {"image/jpeg": {}, "image/png": {}}}, "responses": {"200": {"description": "The updated WorkItem object", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/WorkItem"}}}}}}}}, "tags": [{"name": "headsets", "description": "Operations on Headset objects"}, {"name": "maps", "description": "Operations on Map objects"}, {"name": "work-items", "description": "Operations on WorkItem objects"}], "openapi": "3.0", "components": {"schemas": {"Vector": {"type": "object", "properties": {"z": {"type": "number"}, "y": {"type": "number"}, "x": {"type": "number"}}, "required": ["x", "y", "z"]}, "Headset": {"type": "object", "properties": {"lastUpdate": {"type": "string", "format": "date-time"}, "orientation": {"$ref": "#/components/schemas/Vector"}, "position": {"$ref": "#/components/schemas/Vector"}, "mapID": {"type": "string"}, "name": {"type": "string"}, "id": {"type": "string"}}}, "HeadsetUpdate": {"type": "object", "properties": {"orientation": {"$ref": "#/components/schemas/Vector"}, "headsetID": {"type": "string"}, "position": {"$ref": "#/components/schemas/Vector"}, "mapID": {"type": "string"}}}, "Map": {"type": "object", "properties": {"name": {"type": "string"}, "id": {"type": "string"}, "image": {"type": "string"}}}, "MapFeatureStyle": {"type": "object", "properties": {"placement": {"type": "string"}, "topOffset": {"type": "number"}, "leftOffset": {"type": "number"}}}, "MapFeature": {"type": "object", "properties": {"type": {"type": "string"}, "style": {"$ref": "#/components/schemas/MapFeatureStyle"}, "position": {"$ref": "#/components/schemas/Vector"}, "mapID": {"type": "string"}, "name": {"type": "string"}, "id": {"type": "string"}}}, "MapFeatureType": {"type": "object", "properties": {"name": {"type": "string"}, "description": {"type": "string"}, "unicode": {"type": "string"}, "fa_icon": {"type": "string"}}}, "ImageUpload": {"type": "object", "properties": {"type": {"type": "string"}, "data": {"type": "object"}, "intent": {"type": "string"}, "id": {"type": "string"}, "url": {"type": "string"}}}, "SurfaceFileInformation": {"type": "object", "properties": {"id": {"type": "string"}, "modified": {"type": "number"}, "size": {"type": "integer"}, "filename": {"type": "string"}}}, "WorkItem": {"type": "object", "properties": {"created": {"type": "number"}, "sourceType": {"type": "string", "default": "camera"}, "retention": {"type": "string", "default": "auto"}, "contentType": {"type": "string", "default": "image/jpeg"}, "filePath": {"type": "string", "default": null, "nullable": true}, "status": {"type": "string", "default": "created"}, "id": {"type": "integer"}, "fileUrl": {"type": "string", "default": null, "nullable": true}, "updated": {"type": "number"}}, "required": ["id"]}}}}